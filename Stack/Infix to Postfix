/*
@author Bharti Godwani

Stack | Set 2 (Infix to Postfix)

Infix expression:The expression of the form a op b. When an operator is in-between every pair of operands.

Postfix expression:The expression of the form a b op. When an operator is followed for every pair of operands.
*/
import java.util.Stack;
class Stack16{
    public static void main(String []args){
        String exp = "a+b*(c^d-e)^(f+g*h)-i";
        //System.out.println(
        infixToPostfix(exp);
        System.out.println("abcd^e-fgh*+^*+i-");
        //System.out.println("deque = "+que.poll());
    }
    
    static void infixToPostfix(String exp){
        Stack<String> operand = new Stack<String>();
        Stack<String> operator = new Stack<String>();
        
        for(int i=0; i<exp.length(); i++){
          //  System.out.println("char = "+exp.charAt(i));
            String l,r,s;
            if(isOperand(exp.charAt(i))){
                operand.push(""+exp.charAt(i));
                System.out.println("1operand "+operand.peek());
            }
            else if(exp.charAt(i) == '('){
                operator.push(""+exp.charAt(i));
                System.out.println("2operator "+operator.peek());
            }
            else if(exp.charAt(i) == ')'){
                while(!operator.peek().equals("(")){
                    r = operand.pop();
                    l = operand.pop();
                    s = operator.pop();
                    operand.push(l+r+s);
                    System.out.println("3operand "+operand.peek());
                }
                operator.pop();
            }
            else if(isOperator(exp.charAt(i))){
                if(operator.isEmpty()){
                    operator.push(""+exp.charAt(i));
                    System.out.println("1operator "+operator.peek());
                }
                else if(!operator.isEmpty() && priority(""+exp.charAt(i)) > priority(operator.peek())){
                    operator.push(""+exp.charAt(i));
                    System.out.println("2operator "+operator.peek());
                }
                else{
                    while(!operator.isEmpty() && priority(""+exp.charAt(i)) <= priority(operator.peek())){
                        r = operand.pop();
                        l = operand.pop();
                        s = operator.pop();
                        operand.push(l+r+s);
                        System.out.println("4operand "+operand.peek());
                    }
                }
            }
        }
        
        //for(Object ele : operand){
            //System.out.println(operand.peek());
        //}
    }
    
    static boolean isOperand(char ch){
        if(ch >= 'a' && ch <= 'z')
            return true;
        return false;
    }
    
    static boolean isOperator(char ch){
        if(ch == '+' || ch == '-' || ch == '/' || ch == '*' || ch == '^')
            return true;
        return false;
    }
    
    static int priority(String ch){
        switch(ch){
            case "^":
                return 3;
            case "/":
                return 2; 
            case "*":
                return 2;
            case "-":
                return 1;
            case "+":
                return 1;
        }
        return 0;
    }
}
